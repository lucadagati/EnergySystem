{"version":3,"sources":["./node_modules/@ionic-native/ble/__ivy_ngcc__/ngx/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACS;AACqB;AAC9B;AACM;AACxC;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA,uDAAuD,QAAQ,kEAAO,gBAAgB,qBAAqB,aAAa;AACxH,mDAAmD,QAAQ,kEAAO,qBAAqB,0EAA0E,aAAa;AAC9K,uEAAuE,QAAQ,kEAAO,gCAAgC,0EAA0E,aAAa;AAC7M,0CAA0C,QAAQ,kEAAO,qBAAqB,aAAa;AAC3F,iDAAiD,QAAQ,kEAAO,mBAAmB,2EAA2E,aAAa;AAC3K,0FAA0F,QAAQ,kEAAO,uBAAuB,eAAe,aAAa;AAC5J,6DAA6D,QAAQ,kEAAO,uBAAuB,aAAa;AAChH,2EAA2E,QAAQ,kEAAO,+BAA+B,aAAa;AACtI,oDAAoD,QAAQ,kEAAO,uBAAuB,aAAa;AACvG,+EAA+E,QAAQ,kEAAO,iBAAiB,aAAa;AAC5H,uFAAuF,QAAQ,kEAAO,kBAAkB,aAAa;AACrI,sGAAsG,QAAQ,kEAAO,iCAAiC,aAAa;AACnK,4FAA4F,QAAQ,kEAAO,6BAA6B,mGAAmG,aAAa;AACxP,2FAA2F,QAAQ,kEAAO,6BAA6B,aAAa;AACpJ,qDAAqD,QAAQ,kEAAO,wBAAwB,aAAa;AACzG,2CAA2C,QAAQ,kEAAO,sBAAsB,aAAa;AAC7F,yDAAyD,QAAQ,kEAAO,mCAAmC,wFAAwF,aAAa;AAChN,wDAAwD,QAAQ,kEAAO,mCAAmC,aAAa;AACvH,uDAAuD,QAAQ,kEAAO,kCAAkC,aAAa;AACrH,wCAAwC,QAAQ,kEAAO,mBAAmB,aAAa;AACvF,kDAAkD,QAAQ,kEAAO,qBAAqB,aAAa;AACnG,0EAA0E,QAAQ,kEAAO,6CAA6C,aAAa;AACnJ,iEAAiE,QAAQ,kEAAO,uCAAuC,aAAa;AACpI,+CAA+C,QAAQ,kEAAO,0BAA0B,aAAa;AACrG,mDAAmD,QAAQ,kEAAO,8BAA8B,aAAa;AAC7G;AACA;AACA;AACA;AACA;AACA,oCAAoC,mCAAmC;AACvE,YAAY,gEAAyB,EAAE,oCAAoC,oBAAoB,EAAE,EAAE;AACnG,qCAAqC,mEAA4B;AACjE,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,wDAAU;AACxB,KAAK,eAAe,EAAE;AACtB;AACA,CAAC,CAAC,oEAAiB;AACJ;;AAEf,2CAA2C,cAAc,2v2B","file":"default~bldetail-bldetail-module~bluetooth-bluetooth-module.js","sourcesContent":["import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nvar BLE = /** @class */ (function (_super) {\n    __extends(BLE, _super);\n    function BLE() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BLE.prototype.scan = function (services, seconds) { return cordova(this, \"scan\", { \"observable\": true }, arguments); };\n    BLE.prototype.startScan = function (services) { return cordova(this, \"startScan\", { \"observable\": true, \"clearFunction\": \"stopScan\", \"clearWithArgs\": false }, arguments); };\n    BLE.prototype.startScanWithOptions = function (services, options) { return cordova(this, \"startScanWithOptions\", { \"observable\": true, \"clearFunction\": \"stopScan\", \"clearWithArgs\": false }, arguments); };\n    BLE.prototype.stopScan = function () { return cordova(this, \"stopScan\", {}, arguments); };\n    BLE.prototype.connect = function (deviceId) { return cordova(this, \"connect\", { \"observable\": true, \"clearFunction\": \"disconnect\", \"clearWithArgs\": true }, arguments); };\n    BLE.prototype.autoConnect = function (deviceId, connectCallback, disconnectCallback) { return cordova(this, \"autoConnect\", { \"sync\": true }, arguments); };\n    BLE.prototype.requestMtu = function (deviceId, mtuSize) { return cordova(this, \"requestMtu\", {}, arguments); };\n    BLE.prototype.refreshDeviceCache = function (deviceId, timeoutMillis) { return cordova(this, \"refreshDeviceCache\", {}, arguments); };\n    BLE.prototype.disconnect = function (deviceId) { return cordova(this, \"disconnect\", {}, arguments); };\n    BLE.prototype.read = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, \"read\", {}, arguments); };\n    BLE.prototype.write = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, \"write\", {}, arguments); };\n    BLE.prototype.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, \"writeWithoutResponse\", {}, arguments); };\n    BLE.prototype.startNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, \"startNotification\", { \"observable\": true, \"destruct\": true, \"clearFunction\": \"stopNotification\", \"clearWithArgs\": true }, arguments); };\n    BLE.prototype.stopNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, \"stopNotification\", {}, arguments); };\n    BLE.prototype.isConnected = function (deviceId) { return cordova(this, \"isConnected\", {}, arguments); };\n    BLE.prototype.isEnabled = function () { return cordova(this, \"isEnabled\", {}, arguments); };\n    BLE.prototype.startStateNotifications = function () { return cordova(this, \"startStateNotifications\", { \"observable\": true, \"clearFunction\": \"stopStateNotifications\", \"clearWithArgs\": false }, arguments); };\n    BLE.prototype.stopStateNotifications = function () { return cordova(this, \"stopStateNotifications\", {}, arguments); };\n    BLE.prototype.showBluetoothSettings = function () { return cordova(this, \"showBluetoothSettings\", {}, arguments); };\n    BLE.prototype.enable = function () { return cordova(this, \"enable\", {}, arguments); };\n    BLE.prototype.readRSSI = function (deviceId) { return cordova(this, \"readRSSI\", {}, arguments); };\n    BLE.prototype.connectedPeripheralsWithServices = function (services) { return cordova(this, \"connectedPeripheralsWithServices\", {}, arguments); };\n    BLE.prototype.peripheralsWithIdentifiers = function (uuids) { return cordova(this, \"peripheralsWithIdentifiers\", {}, arguments); };\n    BLE.prototype.bondedDevices = function () { return cordova(this, \"bondedDevices\", {}, arguments); };\n    BLE.prototype.isLocationEnabled = function () { return cordova(this, \"isLocationEnabled\", {}, arguments); };\n    BLE.pluginName = \"BLE\";\n    BLE.plugin = \"cordova-plugin-ble-central\";\n    BLE.pluginRef = \"ble\";\n    BLE.repo = \"https://github.com/don/cordova-plugin-ble-central\";\n    BLE.platforms = [\"Android\", \"iOS\"];\nBLE.ɵfac = function BLE_Factory(t) { return ɵBLE_BaseFactory(t || BLE); };\nBLE.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BLE, factory: function (t) { return BLE.ɵfac(t); } });\nvar ɵBLE_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(BLE);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BLE, [{\n        type: Injectable\n    }], null, null); })();\n    return BLE;\n}(IonicNativePlugin));\nexport { BLE };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"sourceRoot":"webpack:///"}